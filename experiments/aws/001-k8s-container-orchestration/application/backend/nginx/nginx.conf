pid /tmp/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/json;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log  /var/log/nginx/error.log warn;

    # Performance settings
    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout 65;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;

    server {
        listen 80;
        server_name _;

        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Content-Type application/json;

        # Health check endpoint
        location = /health {
            access_log off;
            return 200 '{
    "status": "healthy",
    "service": "backend-api",
    "version": "1.0.0",
    "timestamp": "$time_iso8601",
    "uptime": "$upstream_response_time",
    "hostname": "$hostname"
}';
        }

        # Users API endpoint
        location = /users {
            limit_req zone=api burst=5 nodelay;
            
            return 200 '{
    "data": [
        {
            "id": 1,
            "name": "Tanaka Taro",
            "email": "tanaka@example.com",
            "role": "admin",
            "created_at": "2024-01-15T10:30:00Z"
        },
        {
            "id": 2,
            "name": "Suzuki Hanako",
            "email": "suzuki@example.com", 
            "role": "user",
            "created_at": "2024-01-16T14:45:00Z"
        },
        {
            "id": 3,
            "name": "Sato Jiro",
            "email": "sato@example.com",
            "role": "user", 
            "created_at": "2024-01-17T09:15:00Z"
        }
    ],
    "meta": {
        "total": 3,
        "timestamp": "$time_iso8601",
        "server": "$hostname"
    }
}';
        }

        # Specific user endpoint
        location ~ ^/users/([0-9]+)$ {
            limit_req zone=api burst=5 nodelay;
            
            set $user_id $1;
            return 200 '{
    "data": {
        "id": $user_id,
        "name": "User $user_id",
        "email": "user$user_id@example.com",
        "role": "user",
        "created_at": "2024-01-15T10:30:00Z",
        "last_login": "$time_iso8601"
    },
    "meta": {
        "timestamp": "$time_iso8601",
        "server": "$hostname"
    }
}';
        }

        # Metrics endpoint
        location = /metrics {
            access_log off;
            
            return 200 '{
    "metrics": {
        "requests_total": 12345,
        "requests_per_second": 10.5,
        "response_time_avg": 0.123,
        "memory_usage": {
            "used": "256MB",
            "available": "768MB",
            "percentage": 25.0
        },
        "cpu_usage": {
            "percentage": 15.5,
            "cores": 2
        },
        "uptime": "24h 30m 15s",
        "pod_info": {
            "name": "$hostname",
            "namespace": "default",
            "node": "worker-node-1"
        }
    },
    "timestamp": "$time_iso8601",
    "server": "$hostname"
}';
        }

        # API info endpoint
        location = /info {
            return 200 '{
    "api": {
        "name": "K8s Container Orchestration Backend API",
        "version": "1.0.0",
        "description": "Nginx-based API simulation for EKS experiment",
        "endpoints": [
            "GET /health - Health check",
            "GET /users - List all users", 
            "GET /users/{id} - Get specific user",
            "GET /metrics - System metrics",
            "GET /info - API information"
        ]
    },
    "environment": {
        "platform": "kubernetes",
        "service": "backend-api",
        "timestamp": "$time_iso8601",
        "server": "$hostname"
    }
}';
        }

        # API version endpoint
        location = /version {
            return 200 '{
    "version": "1.0.0",
    "build": "nginx-simulation",
    "timestamp": "$time_iso8601",
    "commit": "abc123def",
    "server": "$hostname"
}';
        }

        # Default API response for undefined endpoints
        location / {
            return 404 '{
    "error": {
        "code": 404,
        "message": "API endpoint not found",
        "path": "$request_uri",
        "method": "$request_method",
        "available_endpoints": [
            "/health",
            "/users",
            "/users/{id}",
            "/metrics", 
            "/info",
            "/version"
        ]
    },
    "timestamp": "$time_iso8601",
    "server": "$hostname"
}';
        }

        # Handle CORS for development
        location ~* \.(OPTIONS)$ {
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
            add_header Access-Control-Max-Age 1728000;
            add_header Content-Type "text/plain; charset=utf-8";
            add_header Content-Length 0;
            return 204;
        }
    }
}